// This file is generated by Gemini.
'use server';

/**
 * @fileOverview Explains the correct answer to a multiple-choice question and why the other options are incorrect.
 *
 * - explainAnswer - A function that provides explanations for the correct answer and incorrect options.
 * - ExplainAnswerInput - The input type for the explainAnswer function.
 * - ExplainAnswerOutput - The return type for the explainAnswer function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ExplainAnswerInputSchema = z.object({
  question: z.string().describe('The multiple-choice question.'),
  correctAnswer: z.string().describe('The correct answer to the question.'),
  incorrectAnswers: z
    .array(z.string())
    .describe('An array of incorrect answers to the question.'),
  engineeringStream: z
    .string()
    .describe(
      'The engineering stream for which the question is intended (e.g., Computer Science, Mechanical Engineering).'
    ),
});
export type ExplainAnswerInput = z.infer<typeof ExplainAnswerInputSchema>;

const ExplainAnswerOutputSchema = z.object({
  explanation: z
    .string()
    .describe(
      'A detailed, step-by-step explanation of the correct answer and why the other options are incorrect.'
    ),
});
export type ExplainAnswerOutput = z.infer<typeof ExplainAnswerOutputSchema>;

export async function explainAnswer(
  input: ExplainAnswerInput
): Promise<ExplainAnswerOutput> {
  return explainAnswerFlow(input);
}

const prompt = ai.definePrompt({
  name: 'explainAnswerPrompt',
  input: {schema: ExplainAnswerInputSchema},
  output: {schema: ExplainAnswerOutputSchema},
  prompt: `You are an expert GATE exam tutor for {{{engineeringStream}}}.

  Provide a clear, step-by-step explanation for the correct answer to the following question. Also, briefly explain why the other options are incorrect.

  Question: {{{question}}}
  Correct Answer: {{{correctAnswer}}}
  Incorrect Answers: {{#each incorrectAnswers}}{{{this}}}\n{{/each}}`,
});

const explainAnswerFlow = ai.defineFlow(
  {
    name: 'explainAnswerFlow',
    inputSchema: ExplainAnswerInputSchema,
    outputSchema: ExplainAnswerOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
